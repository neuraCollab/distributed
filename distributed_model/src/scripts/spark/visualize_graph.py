import os
import time
import json
from pathlib import Path
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib import rcParams
from tqdm import tqdm
import cugraph
import cudf

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
rcParams['figure.figsize'] = (20, 12)
os.environ["CUDA_VISIBLE_DEVICES"] = "0"

class EnhancedGPUGraphVisualizer:
    def __init__(self, graphml_path):
        self.graphml_path = graphml_path
        self.cpu_graph = None
        self.gpu_graph = None
        self.pos = None

    def load_graph_with_positions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞ –∏ –ø–æ–∑–∏—Ü–∏–π...")
        
        # –ß—Ç–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∏ –ø–æ–∑–∏—Ü–∏–π –∏–∑ GraphML
        self.cpu_graph = nx.read_graphml(self.graphml_path)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É–∑–ª–æ–≤
        if all('x' in data and 'y' in data for _, data in self.cpu_graph.nodes(data=True)):
            self.pos = {n: (data['x'], data['y']) for n, data in self.cpu_graph.nodes(data=True)}
            print("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≥—Ä–∞—Ñ–∞")
        else:
            print("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≥—Ä–∞—Ñ–µ. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞—Å—á–µ—Ç –Ω–∞ GPU")

    def convert_to_gpu(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –≤ cuGraph —Ñ–æ—Ä–º–∞—Ç"""
        edges = [(u, v) for u, v in self.cpu_graph.edges()]
        gdf = cudf.DataFrame(edges, columns=['src', 'dst'])
        self.gpu_graph = cugraph.Graph(directed=True)
        self.gpu_graph.from_cudf_edgelist(gdf, source='src', destination='dst')

    def compute_gpu_layout(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –Ω–∞ GPU"""
        if self.pos is None:
            print("\nüßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Force Atlas 2 –Ω–∞ GPU...")
            start = time.time()
            
            gpu_pos = cugraph.force_atlas2(
                self.gpu_graph,
                max_iter=100,
                pos_list=None,
                barnes_hut_optimize=True
            )
            
            self.pos = {k: (v[0], v[1]) for k, v in zip(gpu_pos['vertex'], 
                                                      zip(gpu_pos['x'], gpu_pos['y']))}
            print(f"‚úÖ GPU-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {time.time()-start:.2f} —Å–µ–∫")

    def visualize(self, output_png="graph.png", highlight_top=20):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å matplotlib"""
        print("\nüé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è...")
        start = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑ rcParams
        fig, ax = plt.subplots(figsize=rcParams['figure.figsize'])
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        degree_centrality = nx.degree_centrality(self.cpu_graph)
        top_nodes = sorted(degree_centrality.items(), key=lambda x: x[1], reverse=True)[:highlight_top]
        
        # –†–∏—Å—É–µ–º –≤—Å–µ —É–∑–ª—ã
        nx.draw_networkx_nodes(
            self.cpu_graph,
            pos=self.pos,
            node_size=1,
            node_color='blue',
            alpha=0.3,
            ax=ax
        )
        
        # –í—ã–¥–µ–ª—è–µ–º —Ç–æ–ø-—É–∑–ª—ã
        nx.draw_networkx_nodes(
            self.cpu_graph,
            pos=self.pos,
            nodelist=[n for n, _ in top_nodes],
            node_size=50,
            node_color='red',
            alpha=0.8,
            ax=ax
        )
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ç–æ–ø-—É–∑–ª–æ–≤
        labels = {n: n for n, _ in top_nodes}
        nx.draw_networkx_labels(
            self.cpu_graph,
            pos=self.pos,
            labels=labels,
            font_size=8,
            font_color='black',
            ax=ax
        )
        
        # –†—ë–±—Ä–∞
        nx.draw_networkx_edges(
            self.cpu_graph,
            pos=self.pos,
            edge_color='gray',
            alpha=0.05,
            width=0.1,
            ax=ax
        )
        
        ax.set_title("Optimized Chess Network (OpenOrd + GPU Enhanced)", fontsize=24)
        ax.axis('off')
        plt.savefig(output_png, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_png} –∑–∞ {time.time()-start:.2f} —Å–µ–∫")

    def create_interactive(self, output_html="interactive.html"):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å PyVis"""
        try:
            from pyvis.network import Network
            
            print("\nüíª –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
            
            sample_nodes = list(self.cpu_graph.nodes())[:5000]
            subgraph = self.cpu_graph.subgraph(sample_nodes)
            
            net = Network(
                height="900px",
                width="100%",
                notebook=False,
                directed=True,
                bgcolor="#222222",
                font_color="white"
            )
            
            for node in tqdm(subgraph.nodes(), desc="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤"):
                x, y = self.pos.get(node, (0, 0))
                net.add_node(
                    node,
                    x=x*1000,
                    y=y*1000,
                    size=5,
                    color="#3a7bd5"
                )
            
            for edge in tqdm(subgraph.edges(), desc="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ë–±–µ—Ä"):
                net.add_edge(edge[0], edge[1], width=0.1, color="#cccccc")
            
            net.set_options("""
            {
              "physics": {
                "stabilization": {
                  "enabled": true,
                  "iterations": 100
                },
                "repulsion": {
                  "nodeDistance": 100
                }
              }
            }
            """)
            
            net.save_graph(output_html)
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_html}")
            
        except ImportError:
            print("‚ö†Ô∏è PyVis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: pip install pyvis")

if __name__ == "__main__":
    visualizer = EnhancedGPUGraphVisualizer("graph_time.graphml")
    visualizer.load_graph_with_positions()
    visualizer.convert_to_gpu()
    visualizer.compute_gpu_layout()
    visualizer.visualize("chess_network.png", highlight_top=50)
    visualizer.create_interactive("chess_interactive.html")