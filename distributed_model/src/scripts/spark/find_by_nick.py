# %%
# %pip install networkx matplotlib tqdm python-louvain

# %%
from pyspark.sql import SparkSession
import os
import networkx as nx
import matplotlib.pyplot as plt
from tqdm import tqdm  # –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞

# %%
# üìÇ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
data_dir = os.path.join(os.getcwd(), './work/src/parquets')

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã Parquet, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "lichess_part"
parquet_files = sorted([os.path.join(data_dir, f) for f in os.listdir(data_dir) if f.startswith("lichess_part") and f.endswith(".parquet")])


# %%
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SparkSession
spark = SparkSession.builder \
    .appName("Lichess Data Processing") \
    .getOrCreate()

# üì• –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(parquet_files)}")
df = spark.read.parquet(*parquet_files)

# üéÆ –í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–∞—Ä—Ç–∏–π
print(f"\nüéÆ –í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π: {df.count()}")

# –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫
df.show(5)

# %%
# üì• –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –±–µ–ª—ã—Ö –∏ —á–µ—Ä–Ω—ã—Ö
print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä –∏–≥—Ä–æ–∫–æ–≤ (white, black)...")
edges_df = df.select("white", "black", "white_elo", "black_elo", "result", "time_control", "moves_count")

edges_rdd = edges_df.rdd.flatMap(lambda row: [
    (
        (row["white"], row["black"]),
        (row["white_elo"], row["black_elo"], row["result"], row["time_control"], row["moves_count"])
    ),
    (
        (row["black"], row["white"]),
        (row["black_elo"], row["white_elo"], row["result"], row["time_control"], row["moves_count"])
    )
])

# %%
# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ RDD –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
print("üîÑ –ê–≥–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")

# –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ RDD
total_count = edges_rdd.count()

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
edges_aggregated = edges_rdd.map(lambda edge: (edge[0], edge[1])) \
    .reduceByKey(lambda a, b: (a[0], a[1], a[2], a[3], a[4]))  # –î–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä—ë–±–µ—Ä)

G = nx.DiGraph()  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ

# –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
edges = []

# %%
print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π...")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º time_control –≤ –¥–≤–∞ —á–∏—Å–ª–∞: –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
def parse_time_control(time_control):
    try:
        if '+' in time_control:
            main_time, additional_time = time_control.split('+')
            return int(main_time), int(additional_time)
        else:
            # –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            return int(time_control), 0
    except ValueError:
        # –ï—Å–ª–∏ time_control –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 1, 0  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

for edge, (white_elo, black_elo, result, time_control, moves_count) in tqdm(
    edges_aggregated.collect(), total=total_count, desc="–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä—ë–±–µ—Ä", unit="–ø–∞—Ä—Ç–∏–π"
):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ time_control (—Ñ–æ—Ä–º–∞—Ç "main+increment")
    main_time, additional_time = parse_time_control(time_control)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –∫–∞–∫ —Å—É–º–º—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –≤—Å–µ —Ö–æ–¥—ã, –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–æ –º–∏–Ω—É—Ç:
    if moves_count == 0:
        weight = 0.0001
    else:
        weight = (2 * main_time + moves_count * additional_time) / 60

    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ë–±–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã:
    if result == '1-0':
        # –ü–æ–±–µ–¥–∏–ª–∏ –±–µ–ª—ã–µ: –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ –æ—Ç –±–µ–ª—ã—Ö –∫ —á—ë—Ä–Ω—ã–º
        G.add_edge(edge[0], edge[1], weight=weight)
    elif result == '0-1':
        # –ü–æ–±–µ–¥–∏–ª–∏ —á—ë—Ä–Ω—ã–µ: –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ –æ—Ç —á—ë—Ä–Ω—ã—Ö –∫ –±–µ–ª—ã–º
        G.add_edge(edge[1], edge[0], weight=weight)

print(f"‚úÖ –ê–≥–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ —Ä—ë–±–µ—Ä: {len(G.edges)}")

# %%
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ GraphML
output_path = os.path.join(os.getcwd(), 'graph_time.graphml')
nx.write_graphml(G, output_path)

print(f"–ì—Ä–∞—Ñ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")

# %%
# for edge, (white_elo, black_elo, result, time_control, moves_count) in tqdm(edges_aggregated.collect(), total=total_count, desc="–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä—ë–±–µ—Ä", unit="–ø–∞—Ä—Ç–∏–π"):
    
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ time_control
#     main_time, additional_time = parse_time_control(time_control)
    
#     # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (—Ç—É—Ç –ø–∞—Ä—É –ø–∞—Ä—Ç–∏–π –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç—Å–µ–µ—Ç—Å—è, –Ω—É –∏ –ª–∞–¥–Ω–æ)
#     weight = abs(white_elo - black_elo) / 100 
#     if main_time != 0:
#         weight += moves_count * (additional_time / main_time)
#     else:    
#         weight = 0.0001

#     # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ë–±–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
#     if result == '1-0':
#         # –ü–æ–±–µ–¥–∏–ª–∏ –±–µ–ª—ã–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –±–µ–ª—ã—Ö –∫ —á–µ—Ä–Ω—ã–º
#         G.add_edge(edge[0], edge[1], weight=weight)
#     elif result == '0-1':
#         # –ü–æ–±–µ–¥–∏–ª–∏ —á–µ—Ä–Ω—ã–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —á–µ—Ä–Ω—ã—Ö –∫ –±–µ–ª—ã–º
#         G.add_edge(edge[1], edge[0], weight=weight)

# print(f"‚úÖ –ê–≥–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ —Ä—ë–±–µ—Ä: {len(G.edges)}")

# %%
# # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ GraphML
# output_path = os.path.join(os.getcwd(), 'graph.graphml')
# nx.write_graphml(G, output_path)

# print(f"–ì—Ä–∞—Ñ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")

# %%
def beam_search_max_path(G, source, target, beam_width=5, max_depth=10):
    # –ü—É—Ç–∏ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂–∏ (current_node, path_list, current_weight)
    current_frontier = [(source, [source], 0)]
    best_path = None
    best_weight = float('-inf')
    
    for depth in range(max_depth + 1):
        new_frontier = []
        for node, path, weight in current_frontier:
            if node == target and weight > best_weight:
                best_weight = weight
                best_path = path
            # –†–∞—Å—à–∏—Ä—è–µ–º –ø—É—Ç—å
            for neighbor in G.successors(node):
                if neighbor in path:
                    continue  # –∏—Å–∫–ª—é—á–∞–µ–º —Ü–∏–∫–ª—ã
                edge_weight = G[node][neighbor]['weight']
                new_weight = weight + edge_weight
                new_frontier.append((neighbor, path + [neighbor], new_weight))
        
        # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Å–∞ –∏ –æ—Å—Ç–∞–≤–∏–º beam_width –ª—É—á—à–∏—Ö
        new_frontier.sort(key=lambda x: x[2], reverse=True)
        current_frontier = new_frontier[:beam_width]
        
        if not current_frontier:
            break

    return best_path, best_weight

# %%
def find_top_neighbors(G, player, top_k=5):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–ø-K —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É –≤–µ—Å—É —Ä—ë–±–µ—Ä.
    –î–ª—è —É—á–µ—Ç–∞ –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ –∏—Å—Ö–æ–¥—è—â–∏–µ, —Ç–∞–∫ –∏ –≤—Ö–æ–¥—è—â–∏–µ —Ä–µ–±—Ä–∞.
    
    :param G: –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ (networkx.DiGraph) —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º 'weight' –Ω–∞ —Ä–µ–±—Ä–∞—Ö
    :param player: –∏–º—è –∏–≥—Ä–æ–∫–∞ (–≤–µ—Ä—à–∏–Ω–∞ –≥—Ä–∞—Ñ–∞)
    :param top_k: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    :return: —Å–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–µ–π (–∏–≥—Ä–æ–∫–æ–≤) –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –≤–µ—Å–∞
    """
    neighbors = {}
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ—Å–µ–¥–µ–π
    all_neighbors = set(G.successors(player)) | set(G.predecessors(player))
    
    for neighbor in all_neighbors:
        total_weight = 0
        if G.has_edge(player, neighbor):
            total_weight += G[player][neighbor]['weight']
        if G.has_edge(neighbor, player):
            total_weight += G[neighbor][player]['weight']
        neighbors[neighbor] = total_weight

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ—Å–µ–¥–µ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –≤–µ—Å–∞
    top_neighbors = sorted(neighbors.items(), key=lambda x: x[1], reverse=True)[:top_k]
    # –í–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Å–æ—Å–µ–¥–µ–π
    return [n for n, w in top_neighbors]

def find_path_via_tops(G, source, target, top_k=5, max_depth=10):
    """
    –ò—â–µ—Ç –ø—É—Ç—å –æ—Ç source –¥–æ target, –ø—Ä–æ—Ö–æ–¥—è—â–∏–π —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–æ–ø–æ–≤—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤.
    –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ç–æ–ø-—Å–æ—Å–µ–¥–∏.
    
    :param G: –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ (networkx.DiGraph) —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º 'weight' –Ω–∞ —Ä–µ–±—Ä–∞—Ö
    :param source: –∏—Å—Ö–æ–¥–Ω—ã–π –∏–≥—Ä–æ–∫ (–Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞)
    :param target: —Ü–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ (–∫–æ–Ω–µ—á–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞)
    :param top_k: —Å–∫–æ–ª—å–∫–æ —Ç–æ–ø-—Å–æ—Å–µ–¥–µ–π —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    :param max_depth: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞
    :return: –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å (—Å–ø–∏—Å–æ–∫ –≤–µ—Ä—à–∏–Ω) –∏–ª–∏ None, –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    best_path = None

    def dfs(current, path, depth):
        nonlocal best_path
        if depth > max_depth:
            return
        if current == target:
            best_path = path
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–æ–≤—ã—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        top_neighbors = find_top_neighbors(G, current, top_k)
        for neighbor in top_neighbors:
            if neighbor in path:
                continue  # –∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–≤
            dfs(neighbor, path + [neighbor], depth + 1)
            if best_path is not None:
                # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                return

    dfs(source, [source], 0)
    return best_path


# %%
# 1. –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–ª–∏—è–Ω–∏—è

# a. –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å (Weighted Degree)
weighted_degrees = {}
for node in tqdm(G.nodes(), desc="–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Weighted Degree"):
    total_weight = 0
    for _, _, data in G.out_edges(node, data=True):
        total_weight += data['weight']
    for _, _, data in G.in_edges(node, data=True):
        total_weight += data['weight']
    weighted_degrees[node] = total_weight

top_weighted = sorted(weighted_degrees.items(), key=lambda x: x[1], reverse=True)[:10]


# b. Eigenvector Centrality
print("\n–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Eigenvector Centrality...")
try:
    eigen_centrality = nx.eigenvector_centrality(G, weight='weight', max_iter=250, tol=1e-3)
except nx.PowerIterationFailedConvergence:
    print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—é eigenvector_centrality_numpy...")
    eigen_centrality = nx.eigenvector_centrality_numpy(G, weight='weight')

top_eigen = sorted(eigen_centrality.items(), key=lambda x: x[1], reverse=True)[:10]


# c. Betweenness Centrality
print("\n–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Betweenness Centrality...")
betweenness_centrality = nx.betweenness_centrality(G, weight='weight', k=5, seed=42)
top_betweenness = sorted(betweenness_centrality.items(), key=lambda x: x[1], reverse=True)[:10]

# %%
# 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥

def normalize_dict(d):
    max_val = max(d.values())
    min_val = min(d.values())
    return {k: (v - min_val) / (max_val - min_val) if max_val != min_val else 0 for k, v in d.items()}

print("\n–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞...")
norm_weighted = normalize_dict(weighted_degrees)
norm_eigen = normalize_dict(eigen_centrality)
norm_betweenness = normalize_dict(betweenness_centrality)

combined_rating = {}
for node in tqdm(G.nodes(), desc="–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"):
    combined_rating[node] = (norm_weighted.get(node, 0) +
                             norm_eigen.get(node, 0) +
                             norm_betweenness.get(node, 0)) / 3

top_combined = sorted(combined_rating.items(), key=lambda x: x[1], reverse=True)[:10]

# %%
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
def get_opponent_stats(G, player):
    """
    –î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º:
      - 'count': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π (–µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç 'count' –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è 1 –∑–∞ —Ä–µ–±—Ä–æ)
      - 'weight': —Å—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å —Ä–µ–±–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–∞—Ä—Ç–∏–∏)
    –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ –∏—Å—Ö–æ–¥—è—â–∏–µ, —Ç–∞–∫ –∏ –≤—Ö–æ–¥—è—â–∏–µ —Ä–µ–±—Ä–∞.
    """
    stats = {}
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ä–µ–±—Ä–∞ (player -> neighbor)
    for _, neighbor, data in G.out_edges(player, data=True):
        if neighbor not in stats:
            stats[neighbor] = {'count': 0, 'weight': 0}
        stats[neighbor]['count'] += data.get('count', 1)
        stats[neighbor]['weight'] += data.get('weight', 0)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ä–µ–±—Ä–∞ (neighbor -> player)
    for neighbor, _, data in G.in_edges(player, data=True):
        if neighbor not in stats:
            stats[neighbor] = {'count': 0, 'weight': 0}
        stats[neighbor]['count'] += data.get('count', 1)
        stats[neighbor]['weight'] += data.get('weight', 0)
    return stats

# 1) –¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
def get_top_opponents_by_frequency(G, player, top_n=5):
    stats = get_opponent_stats(G, player)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º tqdm –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –≤–µ–ª–∏–∫–æ)
    sorted_stats = sorted(stats.items(), key=lambda x: x[1]['count'], reverse=True)
    return sorted_stats[:top_n]

# 2) –¢–æ–ø-5 —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –ø–æ –≤–µ—Å—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
def get_top_opponents_by_weight(G, player, top_n=5):
    stats = get_opponent_stats(G, player)
    sorted_stats = sorted(stats.items(), key=lambda x: x[1]['weight'], reverse=True)
    return sorted_stats[:top_n]

# –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Ç–æ–ø-N —Å–æ—Å–µ–¥–µ–π –ø–æ —á–∞—Å—Ç–æ—Ç–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
def get_top_neighbors_by_frequency(G, player, top_n=5):
    stats = get_opponent_stats(G, player)
    sorted_stats = sorted(stats.items(), key=lambda x: x[1]['count'], reverse=True)
    return [n for n, stat in sorted_stats[:top_n]]

# 3) –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –æ—Ç source –¥–æ target, –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ ¬´—Ç–æ–ø–æ–≤—ã—Ö¬ª (–ø–æ —á–∞—Å—Ç–æ—Ç–µ) —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤.
def find_path_via_top_frequency(G, source, target, top_n=5, max_depth=10):
    best_path = None
    def dfs(current, path, depth):
        nonlocal best_path
        if depth > max_depth:
            return
        if current == target:
            best_path = path
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–æ–≤—ã—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        top_neighbors = get_top_neighbors_by_frequency(G, current, top_n)
        for neighbor in tqdm(top_neighbors, desc=f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {current}", leave=False):
            if neighbor in path:
                continue  # –∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–≤
            dfs(neighbor, path + [neighbor], depth + 1)
            if best_path is not None:
                return  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º, –µ—Å–ª–∏ –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω
    dfs(source, [source], 0)
    return best_path


# %%
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
target = "pmp"
source = "king04"

target_player = "pmp"

path, total_weight = beam_search_max_path(G, source, target, beam_width=1000, max_depth=10)

if path:
    print("–ù–∞–π–¥–µ–Ω –ø—É—Ç—å:", path)
    print("–°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –ø—É—Ç–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):", total_weight)
else:
    print("–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø-5 —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
top_opponents = find_top_neighbors(G, target, top_k=5)
print("–¢–æ–ø-5 —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:", top_opponents)

# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Ç–æ–ø-–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –∏—â–µ–º –ø—É—Ç—å –æ—Ç source, –ø—Ä–æ—Ö–æ–¥—è—â–∏–π —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–æ–ø-—Å–≤—è–∑–∏
for opponent in top_opponents:
    path = find_path_via_tops(G, source, opponent, top_k=5, max_depth=10)
    if path:
        print(f"–ü—É—Ç—å –æ—Ç {source} –¥–æ {opponent} —á–µ—Ä–µ–∑ —Ç–æ–ø-—Å–≤—è–∑–∏: {path}")
    else:
        print(f"–ü—É—Ç—å –æ—Ç {source} –¥–æ {opponent} —á–µ—Ä–µ–∑ —Ç–æ–ø-—Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


print("–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–π –≤–µ—Å–æ–≤–æ–π —Å—Ç–µ–ø–µ–Ω–∏ (Weighted Degree):")
for node, wd in top_weighted:
    print(f"{node}: {wd:.2f}")
    

print("\n–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ Eigenvector Centrality:")
for node, ec in top_eigen:
    print(f"{node}: {ec:.4f}")
    

print("\n–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ Betweenness Centrality:")
for node, bc in top_betweenness:
    print(f"{node}: {bc:.4f}")


print("\n–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:")
for node, rating in top_combined:
    print(f"–ò–≥—Ä–æ–∫ {node} —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating:.4f}.")


# 1) –¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
top5_freq = get_top_opponents_by_frequency(G, target_player, top_n=5)
print("–¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –¥–ª—è", target_player)
for opponent, stat in top5_freq:
    print(f"{opponent}: –ß–∞—Å—Ç–æ—Ç–∞ = {stat['count']}, –û–±—â–∏–π –≤–µ—Å = {stat['weight']}")

# 2) –¢–æ–ø-5 —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –ø–æ –≤–µ—Å—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
top5_weight = get_top_opponents_by_weight(G, target_player, top_n=5)
print("\n–¢–æ–ø-5 —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –ø–æ –≤–µ—Å—É –¥–ª—è", target_player)
for opponent, stat in top5_weight:
    print(f"{opponent}: –û–±—â–∏–π –≤–µ—Å = {stat['weight']}, –ß–∞—Å—Ç–æ—Ç–∞ = {stat['count']}")


# %%
num_vertices = G.number_of_nodes()
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –≥—Ä–∞—Ñ–∞ G:", num_vertices)


