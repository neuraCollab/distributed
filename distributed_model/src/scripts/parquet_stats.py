# %%
import polars as pl
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# üìÇ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
data_dir = Path(__file__).resolve().parents[1] / "./work/src/parquets"
parquet_files = sorted(data_dir.glob("lichess_part*.parquet"))
print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(parquet_files)}")

# %%
# üì• –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
dfs = [pl.read_parquet(f) for f in parquet_files]
df = pl.concat(dfs, how="vertical")
print(f"\nüéÆ –í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π: {df.shape[0]}")
df.head(5)

# %%
# üìä –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
avg_elo = df.select([
pl.col("white_elo").mean().alias("avg_white_elo"),
pl.col("black_elo").mean().alias("avg_black_elo")
])
print("\nüìà –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏:")
print(avg_elo)

# %%
# ‚ôüÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª—É —Ö–æ–¥–æ–≤
moves_stats = df.select([
pl.col("moves_count").min().alias("min_moves"),
pl.col("moves_count").max().alias("max_moves"),
pl.col("moves_count").mean().alias("avg_moves"),
pl.col("moves_count").median().alias("median_moves")
])
print("\n‚ôüÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª—É —Ö–æ–¥–æ–≤:")
print(moves_stats)

# %%
# üìö –¢–û–ü-10 –¥–µ–±—é—Ç–æ–≤ –ø–æ ECO
eco_stats = df.group_by("eco").len().sort("len", descending=True).head(10)
print("\nüìö –¢–û–ü-10 –¥–µ–±—é—Ç–æ–≤ (–ø–æ ECO):")
print(eco_stats)

# %%
# ‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ö–æ–¥–æ–≤
df = df.with_columns([
    pl.col("timestamp").dt.hour().alias("hour")
])

hourly_stats = (
    df.group_by("hour")
    .agg([
        pl.len().alias("num_games"),
        pl.col("moves_count").mean().alias("avg_moves")
    ])
    .sort("hour")
)

print("\n‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ö–æ–¥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC):")
print(hourly_stats)

# %%
# üìà –ì—Ä–∞—Ñ–∏–∫–∏
hourly_pd = hourly_stats.to_pandas()

# –ì—Ä–∞—Ñ–∏–∫ 1: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π –ø–æ —á–∞—Å–∞–º
plt.figure(figsize=(10, 4))
plt.bar(hourly_pd["hour"], hourly_pd["num_games"], color="skyblue")
plt.title("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π –ø–æ —á–∞—Å–∞–º (UTC)")
plt.xlabel("–ß–∞—Å")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π")
plt.xticks(range(0, 24))
plt.grid(True)
plt.tight_layout()
plt.show()

# %%
# –ì—Ä–∞—Ñ–∏–∫ 2: —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ö–æ–¥–æ–≤ –ø–æ —á–∞—Å–∞–º
plt.figure(figsize=(10, 4))
plt.plot(hourly_pd["hour"], hourly_pd["avg_moves"], marker="o", color="green")
plt.title("üìà –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ö–æ–¥–æ–≤ –ø–æ —á–∞—Å–∞–º (UTC)")
plt.xlabel("–ß–∞—Å")
plt.ylabel("–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ö–æ–¥–æ–≤")
plt.xticks(range(0, 24))
plt.grid(True)
plt.tight_layout()
plt.show()

# %%
# üì¶ BOXPLOT: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–æ–¥–æ–≤ –ø–æ —á–∞—Å–∞–º
df_pd = df.select(["hour", "moves_count"]).drop_nulls().to_pandas()

plt.figure(figsize=(12, 6))
sns.boxplot(x="hour", y="moves_count", data=df_pd, palette="Set3")
plt.title("üì¶ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Ö–æ–¥–æ–≤ –ø–æ —á–∞—Å–∞–º (UTC)")
plt.xlabel("–ß–∞—Å")
plt.ylabel("–ß–∏—Å–ª–æ —Ö–æ–¥–æ–≤ –≤ –ø–∞—Ä—Ç–∏–∏")
plt.grid(True)
plt.tight_layout()
plt.show()

# %%
# üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã –ø–∞—Ä—Ç–∏–π
plt.figure(figsize=(10, 4))
plt.hist(df_pd["moves_count"], bins=50, color="mediumpurple", edgecolor="black", alpha=0.8)
plt.title("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–∞—Ä—Ç–∏–π (moves_count)")
plt.xlabel("–ß–∏—Å–ª–æ —Ö–æ–¥–æ–≤")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π")
plt.grid(True)
plt.tight_layout()
plt.show()

# %%
# –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä—Ç–∏–∏ —Å –º–µ–Ω–µ–µ —á–µ–º 5 —Ö–æ–¥–∞–º–∏
df = df.filter(pl.col("moves_count") >= 5)
df_pd = df.select(["moves_count"]).to_pandas()

# KDE-–≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã –ø–∞—Ä—Ç–∏–π
plt.figure(figsize=(10, 4))
sns.kdeplot(df_pd["moves_count"], fill=True, color="teal")
plt.title("üìà KDE-–≥—Ä–∞—Ñ–∏–∫: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–∞—Ä—Ç–∏–π (moves_count)")
plt.xlabel("–ß–∏—Å–ª–æ —Ö–æ–¥–æ–≤")
plt.ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
plt.grid(True)
plt.tight_layout()
plt.show()

# %%
# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: —Å–∫–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π –≤ —á–∞—Å –ø–æ –∫–∞–∂–¥–æ–º—É ECO
heatmap_df = (
    df.group_by(["hour", "eco"])
    .len()
    .pivot(values="len", index="hour", columns="eco")
    .fill_null(0)
    .sort("hour")
    .to_pandas()
)

heatmap_df = heatmap_df.loc[:, (heatmap_df.sum() > 100)]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, > 100 –ø–∞—Ä—Ç–∏–π –≤—Å–µ–≥–æ

# –°—Ç—Ä–æ–∏–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
plt.figure(figsize=(14, 6))
sns.heatmap(heatmap_df.set_index("hour"), cmap="YlGnBu", linewidths=0.5, linecolor='white')
plt.title("üåê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º –∏ –¥–µ–±—é—Ç–∞–º (ECO)")
plt.xlabel("ECO-–∫–æ–¥ (–¥–µ–±—é—Ç)")
plt.ylabel("–ß–∞—Å UTC")
plt.tight_layout()
plt.show()

# %%
# –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–µ–ª—ã—Ö –∏ —á—ë—Ä–Ω—ã—Ö –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü "player"
df_players = df.select([
    pl.col("white").alias("player"),
    pl.col("moves_count")
]).vstack(
    df.select([
        pl.col("black").alias("player"),
        pl.col("moves_count")
    ])
)

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–≥—Ä–æ–∫—É + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
top_players_stats = (
    df_players.group_by("player")
    .agg([
        pl.len().alias("games_played"),
        pl.col("moves_count").mean().alias("avg_moves"),
        pl.col("moves_count").median().alias("median_moves"),
        pl.col("moves_count").max().alias("max_moves")
    ])
    .sort("games_played", descending=True)
    .head(20)  # —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤
)

top_players_stats = top_players_stats.with_columns([
    (pl.col("games_played") * pl.col("avg_moves")).alias("move_volume"),
    (pl.col("max_moves") - pl.col("median_moves")).alias("variability_score"),
    (pl.col("avg_moves") > 70).alias("long_games")
])

print(top_players_stats)

# %%
# –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä—Ç–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Å—É
df_players = df.select([
    pl.col("white").alias("player"),
    pl.col("hour")
]).vstack(
    df.select([
        pl.col("black").alias("player"),
        pl.col("hour")
    ])
)

player_hour_stats = (
    df_players.group_by(["player", "hour"])
    .agg([
        pl.len().alias("games_in_hour")
    ])
)

player_hour_stats = player_hour_stats.join(
    top_players_stats.select(["player", "avg_moves"]),
    on="player",
    how="inner"
)

player_hour_stats = player_hour_stats.with_columns([
    (pl.col("games_in_hour") * pl.col("avg_moves")).alias("activity_score")
])

player_hour_stats.write_csv("player_hour_activity.csv")
print("\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ player_hour_activity.csv")
