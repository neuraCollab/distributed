# %%
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, udf, size
from pyspark.sql.types import ArrayType, StringType
import json
import os

# üìÇ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
data_dir = os.path.join(os.getcwd(), './work/src/parquets')

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã Parquet, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "lichess_part"
parquet_files = sorted([os.path.join(data_dir, f) for f in os.listdir(data_dir) if f.startswith("lichess_part") and f.endswith(".parquet")])


# –°–æ–∑–¥–∞–µ–º Spark-—Å–µ—Å—Å–∏—é (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
spark = SparkSession.builder.getOrCreate()

# –ó–∞–≥—Ä—É–∑–∫–∞ DataFrame –∏–∑ Parquet (–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ *parquet_files –Ω–∞ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤)
df = spark.read.parquet(*parquet_files)

# –ó–∞–≥—Ä—É–∂–∞–µ–º teams_members.json –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞.
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π JSON –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:
# {
#   "team1": [ { "username": "UserA", ... }, { "username": "UserB", ... } ],
#   "team2": [ { "username": "UserC", ... }, ... ],
#    ...
# }
with open("./work/src/data/teams/teams_members.json", "r", encoding="utf-8") as f:
    teams_data = json.load(f)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å: username (lowercase) -> —Å–ø–∏—Å–æ–∫ team_id, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
user_to_teams = {}
for team_id, members in teams_data.items():
    for member in members:
        username = member.get("name")
        if username:
            user_to_teams.setdefault(username, []).append(team_id)

# –°–æ–∑–¥–∞–µ–º broadcast-–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ user_to_teams
broadcast_user_to_teams = spark.sparkContext.broadcast(user_to_teams)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
def lookup_teams(username):
    if username is None:
        return []
    return broadcast_user_to_teams.value.get(username.lower(), [])

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º UDF, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
lookup_teams_udf = udf(lookup_teams, ArrayType(StringType()))

# –ü—Ä–∏–º–µ–Ω—è–µ–º UDF –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ "white" –∏ "black"
df_with_teams = df.withColumn("white_teams", lookup_teams_udf(col("white")))\
                  .withColumn("black_teams", lookup_teams_udf(col("black")))

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ .write... –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
# df_with_teams.show(truncate=False)

df_filtered = df_with_teams.filter(
    (size(col("white_teams")) > 0) | (size(col("black_teams")) > 0)
)

df_filtered.show(truncate=False)
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:", df_filtered.count())


# %%
from pyspark.sql.functions import col, array_distinct, flatten, collect_list

# –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–æ–∫–∞–º, –≥–¥–µ –¥–ª—è –±–µ–ª—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º white_teams, –¥–ª—è —á–µ—Ä–Ω—ã—Ö ‚Äî black_teams
white_df = df_with_teams.select(col("white").alias("username"), col("white_teams").alias("teams"))
black_df = df_with_teams.select(col("black").alias("username"), col("black_teams").alias("teams"))

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–µ–ª—ã—Ö –∏ —á–µ—Ä–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞—Ö
players_df = white_df.union(black_df)

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã –∫–æ–º–∞–Ω–¥, —É–±–∏—Ä–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
players_teams_df = players_df.groupBy("username") \
    .agg(array_distinct(flatten(collect_list("teams"))).alias("teams"))

# –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ teams –Ω–µ –ø—É—Å—Ç–æ–π (size > 0)
filtered_players = players_teams_df.filter(size(col("teams")) > 0)

# –í—ã–≤–æ–¥–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
filtered_players.show(truncate=False)

# –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫–∏—Ö —Å—Ç—Ä–æ–∫
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ teams:", filtered_players.count())


# %%
from pyspark.sql.functions import explode, countDistinct

# –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥: –ø–æ–ª—É—á–∞–µ–º –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ –∫–∞–∂–¥—É—é (username, team)
players_exploded = filtered_players.select("username", explode("teams").alias("team"))

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –∑–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
team_counts = players_exploded.groupBy("team") \
    .agg(countDistinct("username").alias("player_count")) \
    .orderBy("player_count", ascending=False)

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
team_counts.show(truncate=False)


# %%
print("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:")
for team_name in teams_data.keys():
    print(team_name)


# %%
%pip install folium branca

# %%
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import folium
import branca.colormap as cm

# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ team_counts ‚Äì —ç—Ç–æ Spark DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ "team" –∏ "player_count",
# –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ:
# team_counts = players_exploded.groupBy("team") \
#     .agg(countDistinct("username").alias("player_count")) \
#     .orderBy("player_count", ascending=False)

# –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Spark DataFrame –≤ Python (—ç—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ)
team_counts_list = team_counts.collect()

# –ó–∞–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã -> —Å—Ç—Ä–∞–Ω–∞
team_to_country = {
    "arab-world-team": "Arab World",
    "russian-chess-players": "Russia",
    "iran": "Iran",
    "liga-de-ajdrez-de-bolivar": "Venezuela",
    "club-de-ajedrez-ulp-san-luis": "Argentina",
    "marianczellisci": "Poland",
    "levitov-chess": "Russia",
    "chess_pune": "India",
    "lichess-en-espanol": "Spain",
    "Vj95dS0R": "Russia",
    "satranc-medya-youtube": "Turkey",
    "chess-champions-league": "International",
    "akademi-catur-ariez-azman-acaa": "Indonesia",
    "francophone": "France",
    "libya-chess-competition-team": "Libya",
    "clube-online-xadrez-brasilia-df": "Brazil",
    "army-chess": "International",
    "colegas-de-kike": "Spain",
    "bangalore-chess-club": "India",
    "ciudad-ajedrez": "Spain",
    "dansk-skoleskak": "Denmark"
}

# –ó–∞–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã -> (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞) (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
country_coords = {
    "Arab World": (30.0444, 31.2357),   # Cairo, Egypt
    "Russia": (55.7558, 37.6176),         # Moscow, Russia
    "Iran": (32.4279, 53.6880),
    "Venezuela": (6.4238, -66.5897),
    "Argentina": (-34.6037, -58.3816),    # Buenos Aires, Argentina
    "Poland": (52.2297, 21.0122),         # Warsaw, Poland
    "India": (20.5937, 78.9629),
    "Spain": (40.4637, -3.7492),
    "Turkey": (38.9637, 35.2433),
    "Indonesia": (-0.7893, 113.9213),
    "France": (46.6034, 1.8883),
    "Libya": (26.3351, 17.2283),
    "Brazil": (-14.2350, -51.9253),
    "Denmark": (56.2639, 9.5018)
}

# –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
# (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º "International", –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω—É–∂–Ω—ã)
country_counts = {}
for row in team_counts_list:
    team = row["team"]
    count = row["player_count"]
    country = team_to_country.get(team)
    if country and country != "International":
        country_counts[country] = country_counts.get(country, 0) + count

# –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
print("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:")
for country, cnt in country_counts.items():
    print(f"{country}: {cnt}")

# –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É Folium, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –º–∏—Ä–∞
m = folium.Map(location=[20, 0], zoom_start=2)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∫–∞–ª—ã —Ü–≤–µ—Ç–∞
min_count = min(country_counts.values())
max_count = max(country_counts.values())

# –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–µ–π–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é —à–∫–∞–ª—É
colormap = cm.linear.YlOrRd_09.scale(min_count, max_count)
colormap.caption = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö'
m.add_child(colormap)

# –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
for country, count in country_counts.items():
    coords = country_coords.get(country)
    if coords:
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–¥–∏—É—Å: –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª—é—Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        radius = 10 + (count - min_count) / (max_count - min_count + 1) * 20
        folium.CircleMarker(
            location=coords,
            radius=radius,
            popup=f"{country}: {count}",
            color=colormap(count),
            fill=True,
            fill_color=colormap(count)
        ).add_to(m)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ HTML
m.save("teams_map.html")
print("–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ teams_map.html")



